// Стрелочные функции

// Стрелочные функции имеют сокращённый, более лаконичный синтаксис,
// что уменьшает объем кода, особенно когда функция маленькая или
// если она используется как коллбек.

// Все стрелки создаются как функциональное выражение, и если функция
// не анонимна, то она должна быть присвоена переменной.

// Обычное объявление функции
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// Тоже самое как стрелочная функция
// const arrowAdd = (a, b, c) => {
//   return a + b + c;
// };

// Если параметр один, его объявление может быть без круглых скобок.
// const add = a => {
//     return a + 5;
// };

// Если параметров нет, то обязательно должны быть пустые круглые скобки.
// const greet = () => {
//     console.log("Hello");
// };

// ==========================================================
// Неявный возврат

// В стрелочной функции после символа => идёт её тело.Здесь может быть
// два варианта: с фигурными скобками и без них.

// const add = (a, b, c) => {
//   console.log(a, b, c);
//   return a + b + c;
// };

// Если фигурные скобки есть, и функция должна возвращать какое - то значение,
// необходимо явно поставить return.Это называется явный возврат(explicit return).
// Такой синтаксис используется в том случае, если в теле функции нужно выполнить
// ещё какие - то инструкции кроме возврата значения.
// const add = (a, b, c) => a + b + c;

// Если фигурных скобок нет, то возвращается результат выражения стоящего после =>.
// Это называется неявный возврат(implicit return). В примере вернётся результат выражения
// сложения параметров a, b и c.

// Синтаксис неявного возврата сильно сокращает «шум» объявления функции с телом и
// возвращаемым выражением, но подходит только в случае когда в теле функции не нужно
// выполнять никаких дополнительных инструкций кроме возврата значения.

// // До
// function classicAdd(a, b, c) {
//     return a + b + c;
// };

// // После
// const arrowAdd = (a, b, c) => a + b + c;

// =================================================================
// Псевдомассив arguments

// У стрелочных функций нет локальной переменной arguments, содержащей все
// аргументы.Если необходимо собрать все аргументы в массив, используется
// операция rest.

// const add = (...args) => {
//     console.log(args);
// };

// add(1, 2, 3);

// ==================================================================
// Стрелочные функции как коллбеки

// Анонимные стрелочные функции отлично подходят как коллбеки для перебирающих
// методов массива из - за более краткого синтаксиса объявления, особенно если
// не нужно тело функции.

// const numbers = [5, 10, 15, 20, 25];

// // Объявление функции
// numbers.forEach(function (number, index) {
//     console.log(`Индекс ${index}, значение ${number}`);
// });

// Анонимная стрелочная функция

// numbers.forEach((number, index) => {
//   console.log(`Индекс ${index}, значение ${number}`);
// });

// Стрелочную коллбек - функцию также можно объявлять отдельно и передавать на неё ссылку.
// Это стоит делать если одна функция используется в нескольих местах программы или если она
// громоздкая.

// const numbers = [5, 10, 15, 20, 25];

// const logMassage = (number, index) => {
//     console.log(`Индекс ${index}, значение ${number}`);
// };

// numbers.forEach(logMassage);

