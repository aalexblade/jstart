// Прототипное наследование

// ООП в JavaScript построено на прототипном наследовании.Объекты можно организовать в
// цепочки так, чтобы свойство не найденное в одном объекте, автоматически искалось бы
// в другом.Связующим звеном выступает специальное скрытое свойство[[Prototype]],
// которое в консоли браузера отображается как __proto__.

// Прототип объекта
// Метод Object.create(obj) создаёт и возвращает новый объект, связывая его с объектом obj.

// const animal = {
//   legs: 4,
// };
// const dog = Object.create(animal);
// dog.name = "Манго";

// // console.log(dog); // { name: 'Манго', __proto__: animal }
// // console.log(animal.isPrototypeOf(dog)); // true

// // Объект, на который указывает ссылка в __proto__, называется прототипом.
// // В нашем примере объект animal это прототип для объекта dog.Метод
// // isPrototypeOf() проверяет является ли объект animal прототипом для dog
// //  и возвращает true или false.

// console.log(dog.hasOwnProperty("name"));
// console.log(dog);

// console.log(dog.hasOwnProperty("legs"));
// console.log(dog.legs);

// Обращение dog.name работает очевидным образом - возвращает собственное
// свойство name объекта dog.При обращении к dog.legs интерпретатор ищет
// свойство legs в объекте dog, не находит и продолжает поиск в объекте по
// ссылке из dog.__proto__, то есть, в данном случае, в объекте animal -
// его прототипе.

// То есть прототип - это резервное хранилище свойств и методов объекта,
// автоматически используемое при их поиске.У объекта, который выступает
// прототипом может также быть свой прототип, у того свой, и так далее.

// Поиск свойства выполняется до первого совпадения.Интерпретатор ищет
// свойство по имени в объекте, если не находит, то обращается
//  к свойству __proto__, т.е.переходит по ссылке к объекту - прототипу,
//  а затем и прототипу прототипа.Если интерпретатор доберется до конца
//  цепочки и не найдет свойства с таким именем, то вернёт undefined.

// ИНТЕРЕСНО
// В спецификации свойство __proto__ обозначено как[[Prototype]].Двойные
// квадратные скобки здесь важны, они указывают на то, что это внутреннее,
// служебное свойство.

// ===================================================================
// Метод hasOwnProperty()

// После того как мы узнали о том, как происходит поиск свойств объекта,
// должно стать понятно, почему цикл for...in не делает различия между
// свойствами объекта и его прототипа.

// const animal = { eats: true };
// const dog = Object.create(animal);
// dog.barks = true;

// for (const key in dog) {
//   console.log(key); // barks, eats
// }

// Именно поэтому мы используем метод obj.hasOwnProperty(prop), который
// возвращает true, если свойство prop принадлежит самому объекту obj,
// а не его прототипу, иначе false.

// const animal = {
//   eats: true,
// };
// const dog = Object.create(animal);
// dog.barks = true;

// for (const key in dog) {
//   if (!dog.hasOwnProperty(key)) continue;

//   console.log(key); // barks
// }

// Метод Object.keys(obj) вернет массив только собственных ключей объекта
// obj, поэтому на практике используют именно его, а не for...in.

// const animal = {
//     eats: true,
// };

// const dog = Object.create(animal);
// dog.barks = true;

// const dogKeys = Object.keys(dog);

// console.log(dogKeys);